@model CloudDebugger.Features.Credentials.GetAccessTokenModel
@{
    ViewData["Title"] = "CloudDebugger - Get Access tokens";
}

<h5>Get Access Token</h5>
This page will retrieve an access token using the a custom version of DefaultAzureCredential.
<a href="/Credentials">Back</a>
<br />
<br />
<a href="/Credentials/ViewLog">View internal log</a>
<br />
Calling GetToken took: @Model.ExecutionTime ms<br />
Requested scopes: @Model.Scopes<br />

<br />
<br />


<h5>Selected credential provider</h5>
This is the token credential that successfully retrieved an access token.
@if (Model.SelectedTokenCredential != null)
{
    <table>
        <tr>
            <td>
                @Html.Raw(Model.SelectedTokenCredential.ToString()?.Replace("\n", "\n<br>"))
            </td>
        </tr>
    </table>
    Model.SelectedTokenCredential.ToString();
}
else
{
    <b>No TokenCredentials selected</b>
}

<br />
<br />

<h5>Credential sources</h5>
These are the sources that DefaultAzureCredential will execute if needed.
@if (Model.MyDefaultAzureCredential != null && Model.MyDefaultAzureCredential._sources != null)
{
    <table class="table table-bordered">
        @foreach (var source in Model.MyDefaultAzureCredential._sources)
        {
            <tr>
                <td>@source.GetType().Name</td>
                <td>@Html.Raw(@source?.ToString()?.Replace("\n", "\n<br>"))</td>
            </tr>
        }
    </table>
}
else
{
    <b>No credential sources found</b>
}



<br />
<br />
<h5>DefaultAzureCredential log</h5>
This is an internal DefaultAzureCredential log.
@if (Model.Log != null)
{
    <table>
        <tr>
            <td>
                <pre>@Html.Raw(Model.Log.Replace("<", "&lt"))</pre>
            </td>
        </tr>
    </table>
}
else
{
    <b>No log found</b>
}


<br />
<br />
<h5>Access token</h5>
These are the access token details. Important, this is a sensitive item.
<table class="table table-bordered">
    <tr>
        <td>Expires</td>
        <td>
            @Model.AccessToken.ExpiresOn (in @((int)Model.AccessToken.ExpiresOn.Subtract(DateTime.UtcNow).TotalMinutes) min)
        </td>
    </tr>
    <tr>
        <td>
            Access token<br />
            @if(Model.UrlToJWTIOSite != null)
            {
                 <a href="@Model.UrlToJWTIOSite" target="_blank">JWT.IO</a>
            }
        </td>
        <td id="access_token" style="width: 500px; word-wrap: break-word; display: inline-block; vertical-align: top;">
            @(Model.AccessToken.Token ?? "No token found")
        </td>
    </tr>
</table>


@if (!String.IsNullOrWhiteSpace(Model.ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        <pre>@Model.ErrorMessage</pre>
    </div>
}

@if (!String.IsNullOrWhiteSpace(Model.Message))
{
    <b>@Model.Message</b>
}
