@model CloudDebugger.Features.RequestLogger.CurrentRequestModel
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Server.Kestrel.Core.Features
@using System.Net.Security
@using CloudDebugger.Infrastructure.Middlewares
@{
    ViewData["Title"] = "Cloud Debugger - Request headers";
}

<h3>Current HTTP(s) request details</h3>
This tool provides detailed insights into the current HTTP(s) request.
<br>
<a href="/RequestLogger">Back</a>
<br />
<br />


<h4>HTTP(s) protocol details</h4>
<table class="table table-bordered">
    <tr>
        <td class="col-md-2">Request URL</td>
        <td class="col-md-10">@Model.FinalDisplayUrl</td>
    </tr>
    @if (Model.RawRequest != null && Model.RawRequest.RawUrl != Model.FinalDisplayUrl)
    {
        <tr>
            <td class="col-md-2">Raw Request URL</td>
            <td class="col-md-10">@Model.RawRequest.RawUrl</td>
        </tr>
    }
    <tr>
        <td class="col-md-2">Received protocol</td>
        <td class="col-md-10">@Context.Request.Protocol</td>
    </tr>
    <tr>
        <td class="col-md-2">Received scheme</td>
        <td class="col-md-10">@Context.Request.Scheme</td>
    </tr>
    <tr>
        <td class="col-md-2">Client IP Address</td>
        <td class="col-md-10">@Context.Connection.RemoteIpAddress?.ToString()</td>
    </tr>
    @if (Model.RawRequest != null && Model.RawRequest.RemoteIpAddress != Context.Connection.RemoteIpAddress?.ToString())
    {
        <tr>
            <td class="col-md-2">Raw Client IP Address</td>
            <td class="col-md-10">@(Model.RawRequest.RemoteIpAddress ?? "Unknown")</td>
        </tr> 
    }
</table>

<br />

@{
    var sslStream = Context.Features.Get<SslStream>();
    if (sslStream != null)
    {
        <h4>TLS/SSL details</h4>
        <table class="table table-bordered">
            <tr>
                <td class="col-md-2">Protocol</td>
                <td class="col-md-10">@sslStream.SslProtocol</td>
            </tr>
            <tr>
                <td class="col-md-2">Cipher suite</td>
                <td class="col-md-10">@sslStream.NegotiatedCipherSuite</td>
            </tr>
            <tr>
                <td class="col-md-2">Cipher strength</td>
                <td class="col-md-2">@sslStream.CipherStrength</td>
            </tr>
            <tr>
                <td class="col-md-2">Cipher algorithm</td>
                <td class="col-md-10">@sslStream.CipherAlgorithm.ToString()</td>
            </tr>
            <tr>
                <td class="col-md-2">KeyExchange algorithm</td>
                <td class="col-md-10">
                    @sslStream.KeyExchangeAlgorithm.ToString()
                    @if ((int)(sslStream.KeyExchangeAlgorithm) == 44550)
                    {
                        @:(DiffieHellman)
                    }

                </td>
            </tr>
            <tr>
                <td class="col-md-2">KeyExchange strength</td>
                <td class="col-md-10">@sslStream.KeyExchangeStrength</td>
            </tr>

            @if (sslStream.RemoteCertificate != null)
            {
                var cert = sslStream.RemoteCertificate;
                <tr>
                    <td class="col-md-2">Remote SSL certificate</td>
                    <td class="col-md-10">@cert.Subject</td>
                </tr>
                <tr>
                    <td class="col-md-2">Remote SSL Serial number</td>
                    <td class="col-md-10">@cert.GetSerialNumberString()</td>
                </tr>
            }
            @if (sslStream.LocalCertificate != null)
            {
                var cert2 = sslStream.LocalCertificate;
                <tr>
                    <td class="col-md-2">Local SSL certificate</td>
                    <td class="col-md-10">@cert2.Subject</td>
                </tr>
                <tr>
                    <td class="col-md-2">Local SSL Serial number</td>
                    <td class="col-md-10">@cert2.GetSerialNumberString()</td>
                </tr>
            }
        </table>
    }
}

<br />
<h4>Request Headers</h4>
These are the headers that our controllers and views receive.

<table class="table table-bordered">
    @foreach (var header in Context.Request.Headers.OrderBy(h => h.Key))
    {
        <tr>
            <td class="col-md-2">
                @header.Key
            </td>
            <td class="col-md-10 text-break">
                @header.Value
            </td>
        </tr>
    }
</table>

<br />
<br />

@if (Model.RawRequest != null && Model.RawRequest.RawIncomingHeaders != null)
{
    <h4>Raw Request headers</h4>
    @:These are the raw incoming request headers, before any middleware has modified or added more headers.

    <table class="table table-bordered">
        @foreach (var head in Model.RawRequest.RawIncomingHeaders.OrderBy(h => h.Key).ToList())
        {
            <tr>
                <td class="col-md-2">@head.Key</td>
                <td class="col-md-10 text-break">@head.Value</td>
            </tr>
        }
    </table>

    var rawRequestHeaders = Model.RawRequest.RawIncomingHeaders;
    var finalRequestHeaders = Context.Request.Headers;
    var allKeys = rawRequestHeaders.Keys.Union(finalRequestHeaders.Keys).OrderBy(k => k);
    bool DifferencesFound = false;

    <br />
    <br />
    <h4>Request header differences</h4>
    @:Lists the differences between the incoming request headers and the final request headers after the request pipeline has been processed.
    <table class="table table-bordered">
        <tr>
            <th class="col-md-2">Header</th>
            <th class="col-md-5">Raw Incoming Request</th>
            <th class="col-md-5">Final Request</th>
        </tr>


        @foreach (var key in allKeys)
        {
            var rawValue = rawRequestHeaders.ContainsKey(key) ? rawRequestHeaders[key].ToString() : "N/A";
            var finalValue = finalRequestHeaders.ContainsKey(key) ? finalRequestHeaders[key].ToString() : "N/A";
            if (rawValue != finalValue)
            {
                DifferencesFound = true;
                <tr>
                    <td class="col-md-2">@key</td>
                    <td class="col-md-5 text-break">@rawValue</td>
                    <td class="col-md-5 text-break">@finalValue</td>
                </tr>
            }
        }

        @if (DifferencesFound == false)
        {
            <tr>
                <td colspan="3">No differences found</td>
            </tr>
        }
    </table>
}

<br>
<br>
<h4>Resources</h4>
<ul>
    <li><a href="https://github.com/tndata/CloudDebugger/wiki/CurrentRequestViewer">Documentation</a></li>
    <li><a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields">List of HTTP header fields</a> (Wikipedia)</li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">HTTP headers</a> (Mozilla)</li>
</ul>